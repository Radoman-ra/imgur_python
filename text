views.py
from django.shortcuts import render, redirect, get_object_or_404
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.forms import AuthenticationForm
from django.contrib import messages
from .forms import UserRegistrationForm
from django.contrib.auth.decorators import login_required
from .models import Image, Post, Vote
from .forms import ImageUploadForm


class HelloWorld(APIView):
    def get(self, request):
        return Response({"message": "Hello, world!"}, status=status.HTTP_200_OK)


def register(request):
    if request.method == "POST":
        form = UserRegistrationForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, "Регистрация успешна. Теперь вы можете войти.")
            return redirect("login")
    else:
        form = UserRegistrationForm()
    return render(request, "auth/register.html", {"form": form})


def login_view(request):

    if request.method == "POST":
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            email = form.cleaned_data.get("username")
            password = form.cleaned_data.get("password")
            user = authenticate(request, email=email, password=password)
            if user is not None:
                login(request, user)
                return redirect("home")
            else:
                messages.error(request, "Неправильный email или пароль.")
        else:
            messages.error(request, "Неправильный email или пароль.")
    form = AuthenticationForm()
    return render(request, "auth/login.html", {"form": form})


def home(request):
    if request.method == "POST":
        form = ImageUploadForm(request.POST, request.FILES)
        if form.is_valid():
            image = form.save(commit=False)
            image.user = request.user
            image.save()
            return redirect("home")
    else:
        form = ImageUploadForm()

    images = Image.objects.all().order_by("-uploaded_at")
    return render(request, "home.html", {"images": images, "form": form})


def logout_view(request):
    logout(request)
    return redirect("home")


@login_required
def upvote_post(request, postId):
    post = get_object_or_404(Post, id=postId)
    existing_vote = Vote.objects.filter(user=request.user, post=post).first()

    if existing_vote:
        if existing_vote.vote_type == "upvote":
            messages.info(request, "You've already upvoted this post.")
            return redirect("post_detail", postId=postId)
        elif existing_vote.vote_type == "downvote":
            existing_vote.delete()  # Remove the downvote
            Vote.objects.create(user=request.user, post=post, vote_type="upvote")
            messages.success(request, "You have upvoted this post.")
            return redirect("post_detail", postId=postId)
    else:
        Vote.objects.create(user=request.user, post=post, vote_type="upvote")
        messages.success(request, "You have upvoted this post.")
        return redirect("post_detail", postId=postId)


@login_required
def downvote_post(request, postId):
    post = get_object_or_404(Post, id=postId)
    existing_vote = Vote.objects.filter(user=request.user, post=post).first()

    if existing_vote:
        if existing_vote.vote_type == "downvote":
            messages.info(request, "You've already downvoted this post.")
            return redirect("post_detail", postId=postId)
        elif existing_vote.vote_type == "upvote":
            existing_vote.delete()  # Remove the upvote
            Vote.objects.create(user=request.user, post=post, vote_type="downvote")
            messages.success(request, "You have downvoted this post.")
            return redirect("post_detail", postId=postId)
    else:
        Vote.objects.create(user=request.user, post=post, vote_type="downvote")
        messages.success(request, "You have downvoted this post.")
        return redirect("post_detail", postId=postId)
seting.py
"""
Django settings for imgur project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import environ

from pathlib import Path

env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-6hm$7-ie1nn6$)kx$$iak%+z+q*q3*g)-_%8g3eyzen=7z+kx^"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "gallery",
    "rest_framework",
    "drf_yasg",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "imgur.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "gallery" / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "imgur.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": env("DATABASE_NAME"),
        "USER": env("DATABASE_USER"),
        "PASSWORD": env("DATABASE_PASSWORD"),
        "HOST": env("DATABASE_HOST"),
        "PORT": env("DATABASE_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "gallery.User"
LOGIN_REDIRECT_URL = "home"
LOGOUT_REDIRECT_URL = "login"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
LOGOUT_REDIRECT_URL = "/"

models.py
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager


class UserManager(BaseUserManager):
    def create_user(self, email, username, password=None):
        if not email:
            raise ValueError("Пользователи должны иметь адрес электронной почты")
        if not username:
            raise ValueError("Пользователи должны иметь имя пользователя")

        user = self.model(
            email=self.normalize_email(email),
            username=username,
        )

        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, username, password=None):
        user = self.create_user(
            email,
            username=username,
            password=password,
        )
        user.is_admin = True
        user.save(using=self._db)
        return user


class User(AbstractBaseUser):
    username = models.CharField(max_length=30, unique=True)
    email = models.EmailField(max_length=255, unique=True)
    is_active = models.BooleanField(default=True)
    is_admin = models.BooleanField(default=False)

    objects = UserManager()

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["username"]

    def __str__(self):
        return self.email

    def has_perm(self, perm, obj=None):
        return True

    def has_module_perms(self, app_label):
        return True

    @property
    def is_staff(self):
        return self.is_admin


class Image(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    image = models.ImageField(upload_to="images/")
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title


class Post(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)


class Vote(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    vote_type = models.CharField(max_length=10)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ("user", "post")

url.py
from django.contrib import admin
from django.urls import path, re_path, include
from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from gallery.views import (
    HelloWorld,
    register,
    login_view,
    home,
    logout_view,
    upvote_post,
    downvote_post,
)
from django.conf import settings
from django.conf.urls.static import static

schema_view = get_schema_view(
    openapi.Info(
        title="IMGUR API",
        default_version="v69",
        description="API documentation for your project",
        terms_of_service="https://www.google.com/policies/terms/",
        contact=openapi.Contact(email="rmaksim886@gmail.com"),
        license=openapi.License(name="BSD License"),
    ),
    public=True,
    permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path("admin/", admin.site.urls),
    re_path(
        r"^swagger(?P<format>\.json|\.yaml)$",
        schema_view.without_ui(cache_timeout=0),
        name="schema-json",
    ),
    path(
        "swagger/",
        schema_view.with_ui("swagger", cache_timeout=0),
        name="schema-swagger-ui",
    ),
    path("redoc/", schema_view.with_ui("redoc", cache_timeout=0), name="schema-redoc"),
    path("hello/", HelloWorld.as_view(), name="hello-world"),
    path("accounts/register/", register, name="register"),
    path("accounts/login/", login_view, name="login"),
    path("accounts/logout/", logout_view, name="logout"),
    path("", home, name="home"),
    path("post/<int:postId>/upvote/", upvote_post, name="upvote_post"),
    path("post/<int:postId>/downvote/", downvote_post, name="downvote_post"),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

home.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Imgur Clone</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            background-color: #f5f5f5;
        }
        .navbar {
            background-color: #2f2f2f;
        }
        .navbar-brand {
            color: #fff;
        }
        .card {
            margin-bottom: 20px;
        }
        .card img {
            max-height: 300px;
            object-fit: cover;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark">
        <a class="navbar-brand" href="#">Imgur Clone</a>
        <div>
            {% if user.is_authenticated %}
                <form action="{% url 'logout' %}" method="post">
                    {% csrf_token %}
                    <button type="submit">Log Out</button>
                </form>
            {% else %}
                <a href="{% url 'login' %}"><button>Log In</button></a>
                <a href="{% url 'register' %}"><button>Register</button></a>
            {% endif %}
        </div>
    </body>
    </nav>

    <div class="container mt-4">
        <div class="row">
            <div class="col-md-8">
                <div class="row">
                    {% for image in images %}
                    <div class="col-md-4">
                        <div class="card">
                            <img src="{{ image.image.url }}" class="card-img-top" alt="{{ image.title }}">
                            <div class="card-body">
                                <h5 class="card-title">{{ image.title }}</h5>
                                <p class="card-text">{{ image.description }}</p>
                                <p class="card-text"><small class="text-muted">Uploaded by {{ image.user.username }} on {{ image.uploaded_at }}</small></p>
                                {% if user.is_authenticated %}
                                    <form action="{% url 'upvote_post' post.id %}" method="post">
                                        {% csrf_token %}
                                        <button type="submit">Upvote</button>
                                    </form>
                                    <form action="{% url 'downvote_post' post.id %}" method="post">
                                        {% csrf_token %}
                                        <button type="submit">Downvote</button>
                                    </form>
                                {% else %}
                                    <p><a href="{% url 'login' %}">Login to vote</a></p>
                                {% endif %}

                                <p>Upvotes: {{ post.vote_set.filter(vote_type='upvote').count }}</p>
                                <p>Downvotes: {{ post.vote_set.filter(vote_type='downvote').count }}</p>
                            </div>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
            {% if user.is_authenticated %}
            <div class="col-md-4">
                <h2>Upload Image</h2>
                <form method="POST" enctype="multipart/form-data">
                    {% csrf_token %}
                    {{ form.as_p }}
                    <button type="submit" class="btn btn-primary">Upload</button>
                </form>
            </div>
            {% else %}
            <p>Please <a href="{% url 'login' %}">login</a> to upload images.</p>
         {% endif %}
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>

error:
TemplateSyntaxError at /
Could not parse the remainder: '(vote_type='upvote').count' from 'post.vote_set.filter(vote_type='upvote').count'
Request Method:	GET
Request URL:	http://127.0.0.1:8000/
Django Version:	5.0.7
Exception Type:	TemplateSyntaxError
Exception Value:	
Could not parse the remainder: '(vote_type='upvote').count' from 'post.vote_set.filter(vote_type='upvote').count'
Exception Location:	/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/base.py, line 698, in __init__
Raised during:	gallery.views.home
Python Executable:	/Users/rad/Documents/vs_code/jango/imgur_python/venv/bin/python
Python Version:	3.12.4
Python Path:	
['/Users/rad/Documents/vs_code/jango/imgur_python/imgur',
 '/Library/Frameworks/Python.framework/Versions/3.12/lib/python312.zip',
 '/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12',
 '/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/lib-dynload',
 '/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages',
 '/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/setuptools/_vendor']
Server time:	Sat, 20 Jul 2024 15:04:55 +0000
Error during template rendering
In template /Users/rad/Documents/vs_code/jango/imgur_python/imgur/gallery/templates/home.html, error at line 69

Could not parse the remainder: '(vote_type='upvote').count' from 'post.vote_set.filter(vote_type='upvote').count'
59	                                        <button type="submit">Upvote</button>
60	                                    </form>
61	                                    <form action="{% url 'downvote_post' post.id %}" method="post">
62	                                        {% csrf_token %}
63	                                        <button type="submit">Downvote</button>
64	                                    </form>
65	                                {% else %}
66	                                    <p><a href="{% url 'login' %}">Login to vote</a></p>
67	                                {% endif %}
68	
69	                                <p>Upvotes: {{ post.vote_set.filter(vote_type='upvote').count }}</p>
70	                                <p>Downvotes: {{ post.vote_set.filter(vote_type='downvote').count }}</p>
71	                            </div>
72	                        </div>
73	                    </div>
74	                    {% endfor %}
75	                </div>
76	            </div>
77	            {% if user.is_authenticated %}
78	            <div class="col-md-4">
79	                <h2>Upload Image</h2>
Traceback Switch to copy-and-paste view
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/core/handlers/exception.py, line 55, in inner
                response = get_response(request)
                               ^^^^^^^^^^^^^^^^^^^^^ …
Local vars
Variable	Value
exc	
TemplateSyntaxError("Could not parse the remainder: '(vote_type='upvote').count' from 'post.vote_set.filter(vote_type='upvote').count'")
get_response	
<bound method BaseHandler._get_response of <django.core.handlers.wsgi.WSGIHandler object at 0x102684e00>>
request	
<WSGIRequest: GET '/'>
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/core/handlers/base.py, line 197, in _get_response
                response = wrapped_callback(request, *callback_args, **callback_kwargs)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ …
Local vars
Variable	Value
callback	
<function home at 0x1049e0220>
callback_args	
()
callback_kwargs	
{}
middleware_method	
<bound method CsrfViewMiddleware.process_view of <CsrfViewMiddleware get_response=convert_exception_to_response.<locals>.inner>>
request	
<WSGIRequest: GET '/'>
response	
None
self	
<django.core.handlers.wsgi.WSGIHandler object at 0x102684e00>
wrapped_callback	
<function home at 0x1049e0220>
/Users/rad/Documents/vs_code/jango/imgur_python/imgur/gallery/views.py, line 62, in home
    return render(request, "home.html", {"images": images, "form": form})
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/shortcuts.py, line 25, in render
    content = loader.render_to_string(template_name, context, request, using=using)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/loader.py, line 61, in render_to_string
        template = get_template(template_name, using=using)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/loader.py, line 15, in get_template
            return engine.get_template(template_name)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/backends/django.py, line 33, in get_template
            return Template(self.engine.get_template(template_name), self)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/engine.py, line 177, in get_template
        template, origin = self.find_template(template_name)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/engine.py, line 159, in find_template
                template = loader.get_template(name, skip=skip)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/loaders/cached.py, line 57, in get_template
            template = super().get_template(template_name, skip)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/loaders/base.py, line 28, in get_template
                return Template(
                            …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/base.py, line 154, in __init__
        self.nodelist = self.compile_nodelist()
                             ^^^^^^^^^^^^^^^^^^^^^^^ …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/base.py, line 196, in compile_nodelist
            return parser.parse()
                        ^^^^^^^^^^^^^^ …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/base.py, line 510, in parse
                    raise self.error(token, e)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/base.py, line 508, in parse
                    compiled_result = compile_func(self, token)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^ …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/defaulttags.py, line 861, in do_for
    nodelist_loop = parser.parse(
                          …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/base.py, line 481, in parse
                    raise self.error(token, e)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/base.py, line 479, in parse
                    filter_expression = self.compile_filter(token.contents)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/base.py, line 597, in compile_filter
        return FilterExpression(token, self)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ …
Local vars
/Users/rad/Documents/vs_code/jango/imgur_python/venv/lib/python3.12/site-packages/django/template/base.py, line 698, in __init__
            raise TemplateSyntaxError(
                 ^ …
Local vars
Request information
USER
rmaksim886@gmail.com

GET
No GET data

POST
No POST data

FILES
No FILES data

COOKIES
Variable	Value
csrftoken	
'********************'
sessionid	
'********************'
META
Variable	Value
COLORTERM	
'truecolor'
COMMAND_MODE	
'unix2003'
CONTENT_LENGTH	
''
CONTENT_TYPE	
'text/plain'
CSRF_COOKIE	
'3LewZaRhaIMGEgkybwQRvJDxwv2AIYzB'
DATABASE_HOST	
'127.0.0.1'
DATABASE_NAME	
'imgur_db'
DATABASE_PASSWORD	
'********************'
DATABASE_PORT	
'3306'
DATABASE_USER	
'root'
DJANGO_SETTINGS_MODULE	
'imgur.settings'
GATEWAY_INTERFACE	
'CGI/1.1'
GIT_ASKPASS	
'********************'
HOME	
'/Users/rad'
HOMEBREW_CELLAR	
'/opt/homebrew/Cellar'
HOMEBREW_PREFIX	
'/opt/homebrew'
HOMEBREW_REPOSITORY	
'/opt/homebrew'
HTTP_ACCEPT	
'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8'
HTTP_ACCEPT_ENCODING	
'gzip, deflate, br, zstd'
HTTP_ACCEPT_LANGUAGE	
'ru-RU,ru'
HTTP_CACHE_CONTROL	
'max-age=0'
HTTP_CONNECTION	
'keep-alive'
HTTP_COOKIE	
'********************'
HTTP_HOST	
'127.0.0.1:8000'
HTTP_SEC_CH_UA	
'"Not/A)Brand";v="8", "Chromium";v="126", "Brave";v="126"'
HTTP_SEC_CH_UA_MOBILE	
'?0'
HTTP_SEC_CH_UA_PLATFORM	
'"macOS"'
HTTP_SEC_FETCH_DEST	
'document'
HTTP_SEC_FETCH_MODE	
'navigate'
HTTP_SEC_FETCH_SITE	
'none'
HTTP_SEC_FETCH_USER	
'?1'
HTTP_SEC_GPC	
'1'
HTTP_UPGRADE_INSECURE_REQUESTS	
'1'
HTTP_USER_AGENT	
('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, '
 'like Gecko) Chrome/126.0.0.0 Safari/537.36')
INFOPATH	
'/opt/homebrew/share/info:/opt/homebrew/share/info:'
LANG	
'en_US.UTF-8'
LOGNAME	
'rad'
LaunchInstanceID	
'FE5B4A57-5508-4C70-807A-7DDDD9E1A1EA'
MANPATH	
'/opt/homebrew/share/man::'
MallocNanoZone	
'0'
OLDPWD	
'/Users/rad/Documents/vs_code/jango/imgur_python/imgur'
ORIGINAL_XDG_CURRENT_DESKTOP	
'undefined'
PATH	
('/Users/rad/.vscode/extensions/ms-python.python-2024.10.0-darwin-arm64/python_files/deactivate/zsh:/Users/rad/Documents/vs_code/jango/imgur_python/venv/bin:/Users/rad/.vscode/extensions/ms-python.python-2024.10.0-darwin-arm64/python_files/deactivate/zsh:/Users/rad/Documents/vs_code/jango/imgur_python/venv/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/Library/Frameworks/Python.framework/Versions/3.12/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/usr/local/share/dotnet:~/.dotnet/tools:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/rad/.vscode/extensions/ms-python.python-2024.10.0-darwin-arm64/python_files/deactivate/zsh:/Users/rad/Documents/vs_code/jango/imgur_python/venv/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/Library/Frameworks/Python.framework/Versions/3.12/bin:/Users/rad/Library/Application '
 'Support/JetBrains/Toolbox/scripts:/Users/rad/Library/Application '
 'Support/JetBrains/Toolbox/scripts')
PATH_INFO	
'/'
PS1	
'(venv) %n@%m %1~ %# '
PWD	
'/Users/rad/Documents/vs_code/jango/imgur_python/imgur'
QUERY_STRING	
''
REMOTE_ADDR	
'127.0.0.1'
REMOTE_HOST	
''
REQUEST_METHOD	
'GET'
RUN_MAIN	
'true'
SCRIPT_NAME	
''
SECURITYSESSIONID	
'186b2'
SERVER_NAME	
'1.0.0.127.in-addr.arpa'
SERVER_PORT	
'8000'
SERVER_PROTOCOL	
'HTTP/1.1'
SERVER_SOFTWARE	
'WSGIServer/0.2'
SHELL	
'/bin/zsh'
SHLVL	
'1'
SSH_AUTH_SOCK	
'/private/tmp/com.apple.launchd.eC4K5RApMp/Listeners'
TERM	
'xterm-256color'
TERM_PROGRAM	
'vscode'
TERM_PROGRAM_VERSION	
'1.91.1'
TMPDIR	
'/var/folders/1m/fv76g58d10vflqnr19qkc9k80000gn/T/'
TZ	
'UTC'
USER	
'rad'
USER_ZDOTDIR	
'/Users/rad'
VIRTUAL_ENV	
'/Users/rad/Documents/vs_code/jango/imgur_python/venv'
VIRTUAL_ENV_PROMPT	
'(venv) '
VSCODE_GIT_ASKPASS_EXTRA_ARGS	
'********************'
VSCODE_GIT_ASKPASS_MAIN	
'********************'
VSCODE_GIT_ASKPASS_NODE	
'********************'
VSCODE_GIT_IPC_HANDLE	
'/var/folders/1m/fv76g58d10vflqnr19qkc9k80000gn/T/vscode-git-3d5e2a3b75.sock'
VSCODE_INJECTION	
'1'
XPC_FLAGS	
'0x0'
XPC_SERVICE_NAME	
'0'
ZDOTDIR	
'/Users/rad'
_	
'/Users/rad/Documents/vs_code/jango/imgur_python/venv/bin/python'
__CFBundleIdentifier	
'com.microsoft.VSCode'
__CF_USER_TEXT_ENCODING	
'0x1F5:0x0:0x0'
wsgi.errors	
<_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>
wsgi.file_wrapper	
<class 'wsgiref.util.FileWrapper'>
wsgi.input	
<django.core.handlers.wsgi.LimitedStream object at 0x105ab99f0>
wsgi.multiprocess	
False
wsgi.multithread	
True
wsgi.run_once	
False
wsgi.url_scheme	
'http'
wsgi.version	
(1, 0)
Settings
Using settings module imgur.settings
Setting	Value
ABSOLUTE_URL_OVERRIDES	
{}
ADMINS	
[]
ALLOWED_HOSTS	
[]
APPEND_SLASH	
True
AUTHENTICATION_BACKENDS	
['django.contrib.auth.backends.ModelBackend']
AUTH_PASSWORD_VALIDATORS	
'********************'
AUTH_USER_MODEL	
'gallery.User'
BASE_DIR	
PosixPath('/Users/rad/Documents/vs_code/jango/imgur_python/imgur')
CACHES	
{'default': {'BACKEND': 'django.core.cache.backends.locmem.LocMemCache'}}
CACHE_MIDDLEWARE_ALIAS	
'default'
CACHE_MIDDLEWARE_KEY_PREFIX	
'********************'
CACHE_MIDDLEWARE_SECONDS	
600
CSRF_COOKIE_AGE	
31449600
CSRF_COOKIE_DOMAIN	
None
CSRF_COOKIE_HTTPONLY	
False
CSRF_COOKIE_NAME	
'csrftoken'
CSRF_COOKIE_PATH	
'/'
CSRF_COOKIE_SAMESITE	
'Lax'
CSRF_COOKIE_SECURE	
False
CSRF_FAILURE_VIEW	
'django.views.csrf.csrf_failure'
CSRF_HEADER_NAME	
'HTTP_X_CSRFTOKEN'
CSRF_TRUSTED_ORIGINS	
[]
CSRF_USE_SESSIONS	
False
DATABASES	
{'default': {'ATOMIC_REQUESTS': False,
             'AUTOCOMMIT': True,
             'CONN_HEALTH_CHECKS': False,
             'CONN_MAX_AGE': 0,
             'ENGINE': 'django.db.backends.mysql',
             'HOST': '127.0.0.1',
             'NAME': 'imgur_db',
             'OPTIONS': {},
             'PASSWORD': '********************',
             'PORT': '3306',
             'TEST': {'CHARSET': None,
                      'COLLATION': None,
                      'MIGRATE': True,
                      'MIRROR': None,
                      'NAME': None},
             'TIME_ZONE': None,
             'USER': 'root'}}
DATABASE_ROUTERS	
[]
DATA_UPLOAD_MAX_MEMORY_SIZE	
2621440
DATA_UPLOAD_MAX_NUMBER_FIELDS	
1000
DATA_UPLOAD_MAX_NUMBER_FILES	
100
DATETIME_FORMAT	
'N j, Y, P'
DATETIME_INPUT_FORMATS	
['%Y-%m-%d %H:%M:%S',
 '%Y-%m-%d %H:%M:%S.%f',
 '%Y-%m-%d %H:%M',
 '%m/%d/%Y %H:%M:%S',
 '%m/%d/%Y %H:%M:%S.%f',
 '%m/%d/%Y %H:%M',
 '%m/%d/%y %H:%M:%S',
 '%m/%d/%y %H:%M:%S.%f',
 '%m/%d/%y %H:%M']
DATE_FORMAT	
'N j, Y'
DATE_INPUT_FORMATS	
['%Y-%m-%d',
 '%m/%d/%Y',
 '%m/%d/%y',
 '%b %d %Y',
 '%b %d, %Y',
 '%d %b %Y',
 '%d %b, %Y',
 '%B %d %Y',
 '%B %d, %Y',
 '%d %B %Y',
 '%d %B, %Y']
DEBUG	
True
DEBUG_PROPAGATE_EXCEPTIONS	
False
DECIMAL_SEPARATOR	
'.'
DEFAULT_AUTO_FIELD	
'django.db.models.BigAutoField'
DEFAULT_CHARSET	
'utf-8'
DEFAULT_EXCEPTION_REPORTER	
'django.views.debug.ExceptionReporter'
DEFAULT_EXCEPTION_REPORTER_FILTER	
'django.views.debug.SafeExceptionReporterFilter'
DEFAULT_FILE_STORAGE	
'django.core.files.storage.FileSystemStorage'
DEFAULT_FROM_EMAIL	
'webmaster@localhost'
DEFAULT_INDEX_TABLESPACE	
''
DEFAULT_TABLESPACE	
''
DISALLOWED_USER_AGENTS	
[]
EMAIL_BACKEND	
'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST	
'localhost'
EMAIL_HOST_PASSWORD	
'********************'
EMAIL_HOST_USER	
''
EMAIL_PORT	
25
EMAIL_SSL_CERTFILE	
None
EMAIL_SSL_KEYFILE	
'********************'
EMAIL_SUBJECT_PREFIX	
'[Django] '
EMAIL_TIMEOUT	
None
EMAIL_USE_LOCALTIME	
False
EMAIL_USE_SSL	
False
EMAIL_USE_TLS	
False
FILE_UPLOAD_DIRECTORY_PERMISSIONS	
None
FILE_UPLOAD_HANDLERS	
['django.core.files.uploadhandler.MemoryFileUploadHandler',
 'django.core.files.uploadhandler.TemporaryFileUploadHandler']
FILE_UPLOAD_MAX_MEMORY_SIZE	
2621440
FILE_UPLOAD_PERMISSIONS	
420
FILE_UPLOAD_TEMP_DIR	
None
FIRST_DAY_OF_WEEK	
0
FIXTURE_DIRS	
[]
FORCE_SCRIPT_NAME	
None
FORMAT_MODULE_PATH	
None
FORMS_URLFIELD_ASSUME_HTTPS	
False
FORM_RENDERER	
'django.forms.renderers.DjangoTemplates'
IGNORABLE_404_URLS	
[]
INSTALLED_APPS	
['django.contrib.admin',
 'django.contrib.auth',
 'django.contrib.contenttypes',
 'django.contrib.sessions',
 'django.contrib.messages',
 'django.contrib.staticfiles',
 'gallery',
 'rest_framework',
 'drf_yasg']
INTERNAL_IPS	
[]
LANGUAGES	
[('af', 'Afrikaans'),
 ('ar', 'Arabic'),
 ('ar-dz', 'Algerian Arabic'),
 ('ast', 'Asturian'),
 ('az', 'Azerbaijani'),
 ('bg', 'Bulgarian'),
 ('be', 'Belarusian'),
 ('bn', 'Bengali'),
 ('br', 'Breton'),
 ('bs', 'Bosnian'),
 ('ca', 'Catalan'),
 ('ckb', 'Central Kurdish (Sorani)'),
 ('cs', 'Czech'),
 ('cy', 'Welsh'),
 ('da', 'Danish'),
 ('de', 'German'),
 ('dsb', 'Lower Sorbian'),
 ('el', 'Greek'),
 ('en', 'English'),
 ('en-au', 'Australian English'),
 ('en-gb', 'British English'),
 ('eo', 'Esperanto'),
 ('es', 'Spanish'),
 ('es-ar', 'Argentinian Spanish'),
 ('es-co', 'Colombian Spanish'),
 ('es-mx', 'Mexican Spanish'),
 ('es-ni', 'Nicaraguan Spanish'),
 ('es-ve', 'Venezuelan Spanish'),
 ('et', 'Estonian'),
 ('eu', 'Basque'),
 ('fa', 'Persian'),
 ('fi', 'Finnish'),
 ('fr', 'French'),
 ('fy', 'Frisian'),
 ('ga', 'Irish'),
 ('gd', 'Scottish Gaelic'),
 ('gl', 'Galician'),
 ('he', 'Hebrew'),
 ('hi', 'Hindi'),
 ('hr', 'Croatian'),
 ('hsb', 'Upper Sorbian'),
 ('hu', 'Hungarian'),
 ('hy', 'Armenian'),
 ('ia', 'Interlingua'),
 ('id', 'Indonesian'),
 ('ig', 'Igbo'),
 ('io', 'Ido'),
 ('is', 'Icelandic'),
 ('it', 'Italian'),
 ('ja', 'Japanese'),
 ('ka', 'Georgian'),
 ('kab', 'Kabyle'),
 ('kk', 'Kazakh'),
 ('km', 'Khmer'),
 ('kn', 'Kannada'),
 ('ko', 'Korean'),
 ('ky', 'Kyrgyz'),
 ('lb', 'Luxembourgish'),
 ('lt', 'Lithuanian'),
 ('lv', 'Latvian'),
 ('mk', 'Macedonian'),
 ('ml', 'Malayalam'),
 ('mn', 'Mongolian'),
 ('mr', 'Marathi'),
 ('ms', 'Malay'),
 ('my', 'Burmese'),
 ('nb', 'Norwegian Bokmål'),
 ('ne', 'Nepali'),
 ('nl', 'Dutch'),
 ('nn', 'Norwegian Nynorsk'),
 ('os', 'Ossetic'),
 ('pa', 'Punjabi'),
 ('pl', 'Polish'),
 ('pt', 'Portuguese'),
 ('pt-br', 'Brazilian Portuguese'),
 ('ro', 'Romanian'),
 ('ru', 'Russian'),
 ('sk', 'Slovak'),
 ('sl', 'Slovenian'),
 ('sq', 'Albanian'),
 ('sr', 'Serbian'),
 ('sr-latn', 'Serbian Latin'),
 ('sv', 'Swedish'),
 ('sw', 'Swahili'),
 ('ta', 'Tamil'),
 ('te', 'Telugu'),
 ('tg', 'Tajik'),
 ('th', 'Thai'),
 ('tk', 'Turkmen'),
 ('tr', 'Turkish'),
 ('tt', 'Tatar'),
 ('udm', 'Udmurt'),
 ('ug', 'Uyghur'),
 ('uk', 'Ukrainian'),
 ('ur', 'Urdu'),
 ('uz', 'Uzbek'),
 ('vi', 'Vietnamese'),
 ('zh-hans', 'Simplified Chinese'),
 ('zh-hant', 'Traditional Chinese')]
LANGUAGES_BIDI	
['he', 'ar', 'ar-dz', 'ckb', 'fa', 'ug', 'ur']
LANGUAGE_CODE	
'en-us'
LANGUAGE_COOKIE_AGE	
None
LANGUAGE_COOKIE_DOMAIN	
None
LANGUAGE_COOKIE_HTTPONLY	
False
LANGUAGE_COOKIE_NAME	
'django_language'
LANGUAGE_COOKIE_PATH	
'/'
LANGUAGE_COOKIE_SAMESITE	
None
LANGUAGE_COOKIE_SECURE	
False
LOCALE_PATHS	
[]
LOGGING	
{}
LOGGING_CONFIG	
'logging.config.dictConfig'
LOGIN_REDIRECT_URL	
'home'
LOGIN_URL	
'/accounts/login/'
LOGOUT_REDIRECT_URL	
'/'
MANAGERS	
[]
MEDIA_ROOT	
PosixPath('/Users/rad/Documents/vs_code/jango/imgur_python/imgur/media')
MEDIA_URL	
'/media/'
MESSAGE_STORAGE	
'django.contrib.messages.storage.fallback.FallbackStorage'
MIDDLEWARE	
['django.middleware.security.SecurityMiddleware',
 'django.contrib.sessions.middleware.SessionMiddleware',
 'django.middleware.common.CommonMiddleware',
 'django.middleware.csrf.CsrfViewMiddleware',
 'django.contrib.auth.middleware.AuthenticationMiddleware',
 'django.contrib.messages.middleware.MessageMiddleware',
 'django.middleware.clickjacking.XFrameOptionsMiddleware']
MIGRATION_MODULES	
{}
MONTH_DAY_FORMAT	
'F j'
NUMBER_GROUPING	
0
PASSWORD_HASHERS	
'********************'
PASSWORD_RESET_TIMEOUT	
'********************'
PREPEND_WWW	
False
ROOT_URLCONF	
'imgur.urls'
SECRET_KEY	
'********************'
SECRET_KEY_FALLBACKS	
'********************'
SECURE_CONTENT_TYPE_NOSNIFF	
True
SECURE_CROSS_ORIGIN_OPENER_POLICY	
'same-origin'
SECURE_HSTS_INCLUDE_SUBDOMAINS	
False
SECURE_HSTS_PRELOAD	
False
SECURE_HSTS_SECONDS	
0
SECURE_PROXY_SSL_HEADER	
None
SECURE_REDIRECT_EXEMPT	
[]
SECURE_REFERRER_POLICY	
'same-origin'
SECURE_SSL_HOST	
None
SECURE_SSL_REDIRECT	
False
SERVER_EMAIL	
'root@localhost'
SESSION_CACHE_ALIAS	
'default'
SESSION_COOKIE_AGE	
1209600
SESSION_COOKIE_DOMAIN	
None
SESSION_COOKIE_HTTPONLY	
True
SESSION_COOKIE_NAME	
'sessionid'
SESSION_COOKIE_PATH	
'/'
SESSION_COOKIE_SAMESITE	
'Lax'
SESSION_COOKIE_SECURE	
False
SESSION_ENGINE	
'django.contrib.sessions.backends.db'
SESSION_EXPIRE_AT_BROWSER_CLOSE	
False
SESSION_FILE_PATH	
None
SESSION_SAVE_EVERY_REQUEST	
False
SESSION_SERIALIZER	
'django.contrib.sessions.serializers.JSONSerializer'
SETTINGS_MODULE	
'imgur.settings'
SHORT_DATETIME_FORMAT	
'm/d/Y P'
SHORT_DATE_FORMAT	
'm/d/Y'
SIGNING_BACKEND	
'django.core.signing.TimestampSigner'
SILENCED_SYSTEM_CHECKS	
[]
STATICFILES_DIRS	
[]
STATICFILES_FINDERS	
['django.contrib.staticfiles.finders.FileSystemFinder',
 'django.contrib.staticfiles.finders.AppDirectoriesFinder']
STATICFILES_STORAGE	
'django.contrib.staticfiles.storage.StaticFilesStorage'
STATIC_ROOT	
None
STATIC_URL	
'/static/'
STORAGES	
{'default': {'BACKEND': 'django.core.files.storage.FileSystemStorage'},
 'staticfiles': {'BACKEND': 'django.contrib.staticfiles.storage.StaticFilesStorage'}}
TEMPLATES	
[{'APP_DIRS': True,
  'BACKEND': 'django.template.backends.django.DjangoTemplates',
  'DIRS': [PosixPath('/Users/rad/Documents/vs_code/jango/imgur_python/imgur/gallery/templates')],
  'OPTIONS': {'context_processors': ['django.template.context_processors.debug',
                                     'django.template.context_processors.request',
                                     'django.contrib.auth.context_processors.auth',
                                     'django.contrib.messages.context_processors.messages']}}]
TEST_NON_SERIALIZED_APPS	
[]
TEST_RUNNER	
'django.test.runner.DiscoverRunner'
THOUSAND_SEPARATOR	
','
TIME_FORMAT	
'P'
TIME_INPUT_FORMATS	
['%H:%M:%S', '%H:%M:%S.%f', '%H:%M']
TIME_ZONE	
'UTC'
USE_I18N	
True
USE_THOUSAND_SEPARATOR	
False
USE_TZ	
True
USE_X_FORWARDED_HOST	
False
USE_X_FORWARDED_PORT	
False
WSGI_APPLICATION	
'imgur.wsgi.application'
X_FRAME_OPTIONS	
'DENY'
YEAR_MONTH_FORMAT	
'F Y'
You’re seeing this error because you have DEBUG = True in your Django settings file. Change that to False, and Django will display a standard page generated by the handler for this status code.